// ------------------------------------------------------------------------------
//  <auto-generated>
//      Этот код был создан построителем кодированных тестов ИП.
//      Версия: 14.0.0.0
//
//      Изменения, внесенные в этот файл, могут привести к неправильной работе кода и будут
//      утрачены при повторном формировании кода.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Запуск приложения
        /// </summary>
        public void StartAppRecordedMethod()
        {

            // Запуск "%USERPROFILE%\Desktop\Calc.exe"
            ApplicationUnderTest calcApplication = ApplicationUnderTest.Launch(this.StartAppRecordedMethodParams.ExePath, this.StartAppRecordedMethodParams.AlternateExePath);
        }
        
        /// <summary>
        /// Закрытие приложения
        /// </summary>
        public void CloseAppRecordedMethod()
        {
            #region Variable Declarations
            WinButton uIЗакрытьButton = this.UICalcWindow.UICalcTitleBar.UIЗакрытьButton;
            #endregion

            // Щелкните "Закрыть" кнопка
            Mouse.Click(uIЗакрытьButton, new Point(14, 7));
        }
        
        /// <summary>
        /// ResultRecordedMethod - Используйте "ResultRecordedMethodParams" для передачи параметров в этот метод.
        /// </summary>
        public void ResultRecordedMethod()
        {
            #region Variable Declarations
            WinEdit uIValueOneTextBoxEdit = this.UICalcWindow.UIValueOneTextBoxWindow.UIValueOneTextBoxEdit;
            WinEdit uIValueTwoTextBoxEdit = this.UICalcWindow.UIValueTwoTextBoxWindow.UIValueTwoTextBoxEdit;
            WinButton uIItemButton = this.UICalcWindow.UIItemWindow.UIItemButton;
            #endregion

            // Тип "25" в "valueOneTextBox" надпись
            uIValueOneTextBoxEdit.Text = this.ResultRecordedMethodParams.UIValueOneTextBoxEditText;

            // Тип "10" в "valueTwoTextBox" надпись
            uIValueTwoTextBoxEdit.Text = this.ResultRecordedMethodParams.UIValueTwoTextBoxEditText;

            // Щелкните "+" кнопка
            Mouse.Click(uIItemButton, new Point(23, 19));
        }
        
        /// <summary>
        /// ResultAssertEqualMethod - Используйте "ResultAssertEqualMethodExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void ResultAssertEqualMethod()
        {
            #region Variable Declarations
            WinText uIItem35Text = this.UICalcWindow.UIItem35Window.UIItem35Text;
            #endregion

            // Убедитесь, что свойство DisplayText "35" надпись равняется "35"
            Assert.AreEqual(this.ResultAssertEqualMethodExpectedValues.UIItem35TextDisplayText, uIItem35Text.DisplayText);
        }
        
        /// <summary>
        /// Проверка вычитания
        /// </summary>
        public void ResultSubstractRecordedMethod()
        {
            #region Variable Declarations
            WinEdit uIValueOneTextBoxEdit = this.UICalcWindow.UIValueOneTextBoxWindow.UIValueOneTextBoxEdit;
            WinEdit uIValueTwoTextBoxEdit = this.UICalcWindow.UIValueTwoTextBoxWindow.UIValueTwoTextBoxEdit;
            WinButton uIItemButton = this.UICalcWindow.UIItemWindow1.UIItemButton;
            #endregion

            // Тип "40" в "valueOneTextBox" надпись
            uIValueOneTextBoxEdit.Text = this.ResultSubstractRecordedMethodParams.UIValueOneTextBoxEditText;

            // Тип "23" в "valueTwoTextBox" надпись
            uIValueTwoTextBoxEdit.Text = this.ResultSubstractRecordedMethodParams.UIValueTwoTextBoxEditText;

            // Щелкните "-" кнопка
            Mouse.Click(uIItemButton, new Point(25, 18));
        }
        
        /// <summary>
        /// ResultSubstarctAssertEqualMethod - Используйте "ResultSubstarctAssertEqualMethodExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void ResultSubstarctAssertEqualMethod()
        {
            #region Variable Declarations
            WinText uIItem17Text = this.UICalcWindow.UIItem35Window.UIItem17Text;
            #endregion

            // Убедитесь, что свойство DisplayText "17" надпись равняется "17"
            Assert.AreEqual(this.ResultSubstarctAssertEqualMethodExpectedValues.UIItem17TextDisplayText, uIItem17Text.DisplayText);
        }
        
        /// <summary>
        /// Проверка умножения
        /// </summary>
        public void ResultMultiplicateRecordedMethod()
        {
            #region Variable Declarations
            WinEdit uIValueOneTextBoxEdit = this.UICalcWindow.UIValueOneTextBoxWindow.UIValueOneTextBoxEdit;
            WinEdit uIValueTwoTextBoxEdit = this.UICalcWindow.UIValueTwoTextBoxWindow.UIValueTwoTextBoxEdit;
            WinButton uIItemButton = this.UICalcWindow.UIItemWindow2.UIItemButton;
            #endregion

            // Тип "40" в "valueOneTextBox" надпись
            uIValueOneTextBoxEdit.Text = this.ResultMultiplicateRecordedMethodParams.UIValueOneTextBoxEditText;

            // Тип "10" в "valueTwoTextBox" надпись
            uIValueTwoTextBoxEdit.Text = this.ResultMultiplicateRecordedMethodParams.UIValueTwoTextBoxEditText;

            // Щелкните "*" кнопка
            Mouse.Click(uIItemButton, new Point(22, 19));
        }
        
        /// <summary>
        /// ResultMultiplicateAssertMethod - Используйте "ResultMultiplicateAssertMethodExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void ResultMultiplicateAssertMethod()
        {
            #region Variable Declarations
            WinText uIItem400Text = this.UICalcWindow.UIItem35Window.UIItem400Text;
            #endregion

            // Убедитесь, что свойство DisplayText "400" надпись равняется "400"
            Assert.AreEqual(this.ResultMultiplicateAssertMethodExpectedValues.UIItem400TextDisplayText, uIItem400Text.DisplayText, "Результат не соответствует требуемому");
        }
        
        #region Properties
        public virtual StartAppRecordedMethodParams StartAppRecordedMethodParams
        {
            get
            {
                if ((this.mStartAppRecordedMethodParams == null))
                {
                    this.mStartAppRecordedMethodParams = new StartAppRecordedMethodParams();
                }
                return this.mStartAppRecordedMethodParams;
            }
        }
        
        public virtual ResultRecordedMethodParams ResultRecordedMethodParams
        {
            get
            {
                if ((this.mResultRecordedMethodParams == null))
                {
                    this.mResultRecordedMethodParams = new ResultRecordedMethodParams();
                }
                return this.mResultRecordedMethodParams;
            }
        }
        
        public virtual ResultAssertEqualMethodExpectedValues ResultAssertEqualMethodExpectedValues
        {
            get
            {
                if ((this.mResultAssertEqualMethodExpectedValues == null))
                {
                    this.mResultAssertEqualMethodExpectedValues = new ResultAssertEqualMethodExpectedValues();
                }
                return this.mResultAssertEqualMethodExpectedValues;
            }
        }
        
        public virtual ResultSubstractRecordedMethodParams ResultSubstractRecordedMethodParams
        {
            get
            {
                if ((this.mResultSubstractRecordedMethodParams == null))
                {
                    this.mResultSubstractRecordedMethodParams = new ResultSubstractRecordedMethodParams();
                }
                return this.mResultSubstractRecordedMethodParams;
            }
        }
        
        public virtual ResultSubstarctAssertEqualMethodExpectedValues ResultSubstarctAssertEqualMethodExpectedValues
        {
            get
            {
                if ((this.mResultSubstarctAssertEqualMethodExpectedValues == null))
                {
                    this.mResultSubstarctAssertEqualMethodExpectedValues = new ResultSubstarctAssertEqualMethodExpectedValues();
                }
                return this.mResultSubstarctAssertEqualMethodExpectedValues;
            }
        }
        
        public virtual ResultMultiplicateRecordedMethodParams ResultMultiplicateRecordedMethodParams
        {
            get
            {
                if ((this.mResultMultiplicateRecordedMethodParams == null))
                {
                    this.mResultMultiplicateRecordedMethodParams = new ResultMultiplicateRecordedMethodParams();
                }
                return this.mResultMultiplicateRecordedMethodParams;
            }
        }
        
        public virtual ResultMultiplicateAssertMethodExpectedValues ResultMultiplicateAssertMethodExpectedValues
        {
            get
            {
                if ((this.mResultMultiplicateAssertMethodExpectedValues == null))
                {
                    this.mResultMultiplicateAssertMethodExpectedValues = new ResultMultiplicateAssertMethodExpectedValues();
                }
                return this.mResultMultiplicateAssertMethodExpectedValues;
            }
        }
        
        public UICalcWindow UICalcWindow
        {
            get
            {
                if ((this.mUICalcWindow == null))
                {
                    this.mUICalcWindow = new UICalcWindow();
                }
                return this.mUICalcWindow;
            }
        }
        #endregion
        
        #region Fields
        private StartAppRecordedMethodParams mStartAppRecordedMethodParams;
        
        private ResultRecordedMethodParams mResultRecordedMethodParams;
        
        private ResultAssertEqualMethodExpectedValues mResultAssertEqualMethodExpectedValues;
        
        private ResultSubstractRecordedMethodParams mResultSubstractRecordedMethodParams;
        
        private ResultSubstarctAssertEqualMethodExpectedValues mResultSubstarctAssertEqualMethodExpectedValues;
        
        private ResultMultiplicateRecordedMethodParams mResultMultiplicateRecordedMethodParams;
        
        private ResultMultiplicateAssertMethodExpectedValues mResultMultiplicateAssertMethodExpectedValues;
        
        private UICalcWindow mUICalcWindow;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "StartAppRecordedMethod"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class StartAppRecordedMethodParams
    {

        #region Fields
        /// <summary>
        /// Запуск "%USERPROFILE%\Desktop\Calc.exe"
        /// </summary>
        //public string ExePath = "C:\\Users\\soa2\\Desktop\\Calc.exe";
        //C:\Users\soa2\Documents\Visual Studio 2015\Projects\Calc\Calc\bin\Debug
        //C:\Users\soa2\Desktop\Тест
        public string ExePath = "C:\\Users\\soa2\\Desktop\\Тест\\Calc.exe";

        /// <summary>
        /// Запуск "%USERPROFILE%\Desktop\Calc.exe"
        /// </summary>
        public string AlternateExePath = "%USERPROFILE%\\Desktop\\Calc.exe";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "ResultRecordedMethod"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class ResultRecordedMethodParams
    {
        
        #region Fields
        /// <summary>
        /// Тип "25" в "valueOneTextBox" надпись
        /// </summary>
        public string UIValueOneTextBoxEditText = "25";
        
        /// <summary>
        /// Тип "10" в "valueTwoTextBox" надпись
        /// </summary>
        public string UIValueTwoTextBoxEditText = "10";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "ResultAssertEqualMethod"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class ResultAssertEqualMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство DisplayText "35" надпись равняется "35"
        /// </summary>
        public string UIItem35TextDisplayText = "35";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "ResultSubstractRecordedMethod"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class ResultSubstractRecordedMethodParams
    {
        
        #region Fields
        /// <summary>
        /// Тип "40" в "valueOneTextBox" надпись
        /// </summary>
        public string UIValueOneTextBoxEditText = "40";
        
        /// <summary>
        /// Тип "23" в "valueTwoTextBox" надпись
        /// </summary>
        public string UIValueTwoTextBoxEditText = "23";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "ResultSubstarctAssertEqualMethod"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class ResultSubstarctAssertEqualMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство DisplayText "17" надпись равняется "17"
        /// </summary>
        public string UIItem17TextDisplayText = "17";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "ResultMultiplicateRecordedMethod"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class ResultMultiplicateRecordedMethodParams
    {
        
        #region Fields
        /// <summary>
        /// Тип "40" в "valueOneTextBox" надпись
        /// </summary>
        public string UIValueOneTextBoxEditText = "40";
        
        /// <summary>
        /// Тип "10" в "valueTwoTextBox" надпись
        /// </summary>
        public string UIValueTwoTextBoxEditText = "10";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "ResultMultiplicateAssertMethod"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class ResultMultiplicateAssertMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство DisplayText "400" надпись равняется "400"
        /// </summary>
        public string UIItem400TextDisplayText = "400";
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UICalcWindow : WinWindow
    {
        
        public UICalcWindow()
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Calc";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Calc");
            #endregion
        }
        
        #region Properties
        public UICalcTitleBar UICalcTitleBar
        {
            get
            {
                if ((this.mUICalcTitleBar == null))
                {
                    this.mUICalcTitleBar = new UICalcTitleBar(this);
                }
                return this.mUICalcTitleBar;
            }
        }
        
        public UIValueOneTextBoxWindow UIValueOneTextBoxWindow
        {
            get
            {
                if ((this.mUIValueOneTextBoxWindow == null))
                {
                    this.mUIValueOneTextBoxWindow = new UIValueOneTextBoxWindow(this);
                }
                return this.mUIValueOneTextBoxWindow;
            }
        }
        
        public UIValueTwoTextBoxWindow UIValueTwoTextBoxWindow
        {
            get
            {
                if ((this.mUIValueTwoTextBoxWindow == null))
                {
                    this.mUIValueTwoTextBoxWindow = new UIValueTwoTextBoxWindow(this);
                }
                return this.mUIValueTwoTextBoxWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItem35Window UIItem35Window
        {
            get
            {
                if ((this.mUIItem35Window == null))
                {
                    this.mUIItem35Window = new UIItem35Window(this);
                }
                return this.mUIItem35Window;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2(this);
                }
                return this.mUIItemWindow2;
            }
        }
        #endregion
        
        #region Fields
        private UICalcTitleBar mUICalcTitleBar;
        
        private UIValueOneTextBoxWindow mUIValueOneTextBoxWindow;
        
        private UIValueTwoTextBoxWindow mUIValueTwoTextBoxWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIItem35Window mUIItem35Window;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIItemWindow2 mUIItemWindow2;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UICalcTitleBar : WinTitleBar
    {
        
        public UICalcTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.WindowTitles.Add("Calc");
            #endregion
        }
        
        #region Properties
        public WinButton UIЗакрытьButton
        {
            get
            {
                if ((this.mUIЗакрытьButton == null))
                {
                    this.mUIЗакрытьButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIЗакрытьButton.SearchProperties[WinButton.PropertyNames.Name] = "Закрыть";
                    this.mUIЗакрытьButton.WindowTitles.Add("Calc");
                    #endregion
                }
                return this.mUIЗакрытьButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIЗакрытьButton;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIValueOneTextBoxWindow : WinWindow
    {
        
        public UIValueOneTextBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "valueOneTextBox";
            this.WindowTitles.Add("Calc");
            #endregion
        }
        
        #region Properties
        public WinEdit UIValueOneTextBoxEdit
        {
            get
            {
                if ((this.mUIValueOneTextBoxEdit == null))
                {
                    this.mUIValueOneTextBoxEdit = new WinEdit(this);
                    #region Условия поиска
                    this.mUIValueOneTextBoxEdit.WindowTitles.Add("Calc");
                    #endregion
                }
                return this.mUIValueOneTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIValueOneTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIValueTwoTextBoxWindow : WinWindow
    {
        
        public UIValueTwoTextBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "valueTwoTextBox";
            this.WindowTitles.Add("Calc");
            #endregion
        }
        
        #region Properties
        public WinEdit UIValueTwoTextBoxEdit
        {
            get
            {
                if ((this.mUIValueTwoTextBoxEdit == null))
                {
                    this.mUIValueTwoTextBoxEdit = new WinEdit(this);
                    #region Условия поиска
                    this.mUIValueTwoTextBoxEdit.WindowTitles.Add("Calc");
                    #endregion
                }
                return this.mUIValueTwoTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIValueTwoTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "additionButton";
            this.WindowTitles.Add("Calc");
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIItemButton.SearchProperties[WinButton.PropertyNames.Name] = "+";
                    this.mUIItemButton.WindowTitles.Add("Calc");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItem35Window : WinWindow
    {
        
        public UIItem35Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "resultLabel";
            this.WindowTitles.Add("Calc");
            #endregion
        }
        
        #region Properties
        public WinText UIItem35Text
        {
            get
            {
                if ((this.mUIItem35Text == null))
                {
                    this.mUIItem35Text = new WinText(this);
                    #region Условия поиска
                    this.mUIItem35Text.SearchProperties[WinText.PropertyNames.Name] = "35";
                    this.mUIItem35Text.WindowTitles.Add("Calc");
                    #endregion
                }
                return this.mUIItem35Text;
            }
        }
        
        public WinText UIItem17Text
        {
            get
            {
                if ((this.mUIItem17Text == null))
                {
                    this.mUIItem17Text = new WinText(this);
                    #region Условия поиска
                    this.mUIItem17Text.SearchProperties[WinText.PropertyNames.Name] = "17";
                    this.mUIItem17Text.WindowTitles.Add("Calc");
                    #endregion
                }
                return this.mUIItem17Text;
            }
        }
        
        public WinText UIItem400Text
        {
            get
            {
                if ((this.mUIItem400Text == null))
                {
                    this.mUIItem400Text = new WinText(this);
                    #region Условия поиска
                    this.mUIItem400Text.SearchProperties[WinText.PropertyNames.Name] = "400";
                    this.mUIItem400Text.WindowTitles.Add("Calc");
                    #endregion
                }
                return this.mUIItem400Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIItem35Text;
        
        private WinText mUIItem17Text;
        
        private WinText mUIItem400Text;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "subtractionButton";
            this.WindowTitles.Add("Calc");
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIItemButton.SearchProperties[WinButton.PropertyNames.Name] = "-";
                    this.mUIItemButton.WindowTitles.Add("Calc");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "14.0.23107.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "multiplicationButton";
            this.WindowTitles.Add("Calc");
            #endregion
        }
        
        #region Properties
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                    #region Условия поиска
                    this.mUIItemButton.SearchProperties[WinButton.PropertyNames.Name] = "*";
                    this.mUIItemButton.WindowTitles.Add("Calc");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItemButton;
        #endregion
    }
}
